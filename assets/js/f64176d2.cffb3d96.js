"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[760],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(t),m=i,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||l;return t?a.createElement(h,r(r({ref:n},u),{},{components:t})):a.createElement(h,r({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const l={title:"Defining the Schema - Scala",sidebar_label:"Defining the Schema - Scala",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/schema-scala.md"},r=void 0,o={unversionedId:"schema-scala",id:"schema-scala",title:"Defining the Schema - Scala",description:"In most cases, we can use Schema.derived[A] to automatically derive the schema, but if we want to define it manually, we can use the builder class in symphony.schema.builder.*.",source:"@site/../mdoc/target/mdoc/schema-scala.md",sourceDirName:".",slug:"/schema-scala",permalink:"/SymphonyQL/docs/schema-scala",draft:!1,editUrl:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/schema-scala.md",tags:[],version:"current",frontMatter:{title:"Defining the Schema - Scala",sidebar_label:"Defining the Schema - Scala",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/schema-scala.md"},sidebar:"someSidebar",previous:{title:"Defining the Schema - Java",permalink:"/SymphonyQL/docs/schema-java"},next:{title:"Schema Specification",permalink:"/SymphonyQL/docs/schema"}},c={},s=[{value:"Creating a schema manually",id:"creating-a-schema-manually",level:2},{value:"<code>EnumBuilder</code>",id:"enumbuilder",level:3},{value:"<code>InputObjectBuilder</code>",id:"inputobjectbuilder",level:3},{value:"<code>ObjectBuilder</code>",id:"objectbuilder",level:3},{value:"<code>InterfaceBuilder</code>",id:"interfacebuilder",level:3},{value:"<code>UnionBuilder</code>",id:"unionbuilder",level:3},{value:"Enums, unions, interfaces",id:"enums-unions-interfaces",level:2},{value:"Tool annotations",id:"tool-annotations",level:2},{value:"<code>@GQLDefault</code>",id:"gqldefault",level:3},{value:"<code>@GQLDeprecated</code>",id:"gqldeprecated",level:3},{value:"<code>@GQLDescription</code>",id:"gqldescription",level:3},{value:"<code>@GQLExcluded</code>",id:"gqlexcluded",level:3},{value:"<code>@GQLInputName</code>",id:"gqlinputname",level:3},{value:"<code>@GQLInterface</code>",id:"gqlinterface",level:3},{value:"<code>@GQLName</code>",id:"gqlname",level:3},{value:"<code>@GQLUnion</code>",id:"gqlunion",level:3}],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In most cases, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema.derived[A]")," to automatically derive the schema, but if we want to define it manually, we can use the builder class in ",(0,i.kt)("inlineCode",{parentName:"p"},"symphony.schema.builder.*"),"."),(0,i.kt)("h2",{id:"creating-a-schema-manually"},"Creating a schema manually"),(0,i.kt)("p",null,"This is a Scala-defined SymphonyQL's API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"enum Origin {\n  case EARTH, MARS, BELT\n}\n\ncase class Character(name: String, origin: Origin)\ncase class FilterArgs(origin: Option[Origin])\ncase class Queries(characters: FilterArgs => Source[Character, NotUsed])\n")),(0,i.kt)("p",null,"Automatically derive a schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"Schema.derived[Queries]\n// summon[Schema[Queries]]\n")),(0,i.kt)("p",null,"If we want to customize it, we just need to define a new implicit."),(0,i.kt)("h3",{id:"enumbuilder"},(0,i.kt)("inlineCode",{parentName:"h3"},"EnumBuilder")),(0,i.kt)("p",null,"Defining SymphonyQL ",(0,i.kt)("strong",{parentName:"p"},"Enum Type"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'type JavaFunction[T, R] = java.util.function.Function[T, R]\n\nimplicit val enumSchema: Schema[Origin] = EnumBuilder\n  .newEnum[Origin]()\n  .name("Origin")\n  .value(builder => builder.name("EARTH").isDeprecated(false).build())\n  .value(builder => builder.name("MARS").isDeprecated(false).build())\n  .value(builder => builder.name("BELT").isDeprecated(false).build())\n  .serialize(new JavaFunction[Origin, String]() {\n    override def apply(t: Origin): String = t.toString\n  })\n  .build()\n')),(0,i.kt)("h3",{id:"inputobjectbuilder"},(0,i.kt)("inlineCode",{parentName:"h3"},"InputObjectBuilder")),(0,i.kt)("p",null,"Defining SymphonyQL ",(0,i.kt)("strong",{parentName:"p"},"Input Object Type"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'implicit val inputSchema: Schema[FilterArgs] = InputObjectBuilder\n  .newObject[FilterArgs]()\n  .name("FilterArgs")\n  .fields(builder => builder.name("name").schema(summon[Schema[Option[Origin]]]).build())\n  .build()\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"FilterArgs")," will be tiled, so the input parameter is ",(0,i.kt)("inlineCode",{parentName:"p"},"origin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Option<Origin>")," is the default supported type, no need for anything extra. For more types, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/SymphonyQL/docs/schema"},"Schema Specification"),"."),(0,i.kt)("h3",{id:"objectbuilder"},(0,i.kt)("inlineCode",{parentName:"h3"},"ObjectBuilder")),(0,i.kt)("p",null,"Defining simple SymphonyQL ",(0,i.kt)("strong",{parentName:"p"},"Object Type"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'implicit val outputSchema: Schema[Character] = ObjectBuilder\n  .newObject[Character]()\n  .name("Character")\n  .field[String](\n    builder => builder.name("name").schema(summon[Schema[String]]).build(),\n    c => c.name\n  )\n  .field[Origin](\n    builder => builder.name("origin").schema(summon[Schema[Origin]]).build(),\n    c => c.origin\n  )\n  .build()\n')),(0,i.kt)("p",null,"Defining complex SymphonyQL ",(0,i.kt)("strong",{parentName:"p"},"Object Type")," for ",(0,i.kt)("strong",{parentName:"p"},"resolver"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'implicit val queriesSchema: Schema[Queries] = ObjectBuilder\n  .newObject[Queries]()\n  .name("Queries")\n  .fieldWithArg(\n    builder =>\n      builder\n        .name("characters")\n        .schema(summon[Schema[FilterArgs => scaladsl.Source[Character, NotUsed]]])\n        .build(),\n    a => a.characters\n  )\n  .build()\n')),(0,i.kt)("p",null,"Each ",(0,i.kt)("strong",{parentName:"p"},"resolver")," can contain multiple fields, each of which is a Query/Mutation/Subscription API.\nFor more types, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/SymphonyQL/docs/schema"},"Schema Specification"),"."),(0,i.kt)("h3",{id:"interfacebuilder"},(0,i.kt)("inlineCode",{parentName:"h3"},"InterfaceBuilder")),(0,i.kt)("p",null,"Defining SymphonyQL ",(0,i.kt)("strong",{parentName:"p"},"Interface Type"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'implicit val newInterface = UnionBuilder.newObject[NestedInterface]\n    .description(Optional.ofNullable("NestedInterface"))\n    .origin(Optional.of("symphony.apt.tests.NestedInterface"))\n    .name("NestedInterface")\n    .subSchema("Mid1", summon[Schema[Mid1]])\n    .subSchema("Mid2", summon[Schema[Mid2]])\n    .build()\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mid1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mid2")," are direct subclasses of the trait."),(0,i.kt)("h3",{id:"unionbuilder"},(0,i.kt)("inlineCode",{parentName:"h3"},"UnionBuilder")),(0,i.kt)("p",null,"Defining SymphonyQL ",(0,i.kt)("strong",{parentName:"p"},"Union Type"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'implicit val newUnion = UnionBuilder.newObject[SearchResult]\n    .description(Optional.ofNullable("SearchResult"))\n    .origin(Optional.of("symphony.apt.tests.SearchResult"))\n    .name("SearchResult")\n    .subSchema("Book", summon[Schema[Book]])\n    .subSchema("Author", summon[Schema[Author]])\n    .build()\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Book")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Author")," are direct subclasses of the trait."),(0,i.kt)("h2",{id:"enums-unions-interfaces"},"Enums, unions, interfaces"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If you don't want to manually define enumerations, interfaces and union schemas, please read here.")),(0,i.kt)("p",null,"A sealed trait will be converted to a different GraphQL type depending on its content:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a sealed trait with only case objects will be converted to an ",(0,i.kt)("inlineCode",{parentName:"li"},"ENUM")),(0,i.kt)("li",{parentName:"ul"},"a sealed trait with only case classes will be converted to a ",(0,i.kt)("inlineCode",{parentName:"li"},"UNION"))),(0,i.kt)("p",null,'GraphQL does not support empty objects, so in case a sealed trait mixes case classes and case objects, a union type will be created and the case objects will have a "fake" field named ',(0,i.kt)("inlineCode",{parentName:"p"},"_")," which is not queryable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait ORIGIN\nobject ORIGIN {\n  case object EARTH extends ORIGIN\n  case object MARS  extends ORIGIN\n  case object BELT  extends ORIGIN\n}\n")),(0,i.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"enum Origin {\n  BELT\n  EARTH\n  MARS\n}\n")),(0,i.kt)("p",null,"Here's an example of union:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait Role\nobject Role {\n  case class Captain(shipName: String) extends Role\n  case class Engineer(specialty: String) extends Role\n  case object Mechanic extends Role\n}\n")),(0,i.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"union Role = Captain | Engineer | Mechanic\n\ntype Captain {\n  shipName: String!\n}\n\ntype Engineer {\n  specialty: String!\n}\n\ntype Mechanic {\n  _: Boolean!\n}\n")),(0,i.kt)("h2",{id:"tool-annotations"},"Tool annotations"),(0,i.kt)("h3",{id:"gqldefault"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLDefault")),(0,i.kt)("p",null,"Annotation to specify the default value of an input field."),(0,i.kt)("h3",{id:"gqldeprecated"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLDeprecated")),(0,i.kt)("p",null,"Annotation used to indicate a type or a field is deprecated."),(0,i.kt)("h3",{id:"gqldescription"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLDescription")),(0,i.kt)("p",null,"Annotation used to provide a description to a field or a type."),(0,i.kt)("h3",{id:"gqlexcluded"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLExcluded")),(0,i.kt)("p",null,"Annotation used to exclude a field from a type."),(0,i.kt)("h3",{id:"gqlinputname"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLInputName")),(0,i.kt)("p",null,"Annotation used to customize the name of an input type."),(0,i.kt)("h3",{id:"gqlinterface"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLInterface")),(0,i.kt)("p",null,"Annotation to make a sealed trait an interface instead of a union type or an enum."),(0,i.kt)("h3",{id:"gqlname"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLName")),(0,i.kt)("p",null,"Annotation used to provide an alternative name to a field or a type."),(0,i.kt)("h3",{id:"gqlunion"},(0,i.kt)("inlineCode",{parentName:"h3"},"@GQLUnion")),(0,i.kt)("p",null,"Annotation to make a sealed trait a union instead of an enum."))}d.isMDXComponent=!0}}]);