"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[379],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=c(t),u=r,h=s["".concat(p,".").concat(u)]||s[u]||d[u]||i;return t?a.createElement(h,o(o({ref:n},m),{},{components:t})):a.createElement(h,o({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1284:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={title:"Defining the Schema - Java",sidebar_label:"Defining the Schema - Java",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/schema-java.md"},o=void 0,l={unversionedId:"schema-java",id:"schema-java",title:"Defining the Schema - Java",description:"In Java, there is no metaprogramming, we use APT (Java Annotation Processing) to generate codes.",source:"@site/../mdoc/target/mdoc/schema-java.md",sourceDirName:".",slug:"/schema-java",permalink:"/SymphonyQL/docs/schema-java",draft:!1,editUrl:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/schema-java.md",tags:[],version:"current",frontMatter:{title:"Defining the Schema - Java",sidebar_label:"Defining the Schema - Java",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/schema-java.md"},sidebar:"someSidebar",previous:{title:"Installing",permalink:"/SymphonyQL/docs/installation"},next:{title:"Defining the Schema - Scala",permalink:"/SymphonyQL/docs/schema-scala"}},p={},c=[{value:"Core annotations",id:"core-annotations",level:2},{value:"<code>@EnumSchema</code>",id:"enumschema",level:3},{value:"<code>@InputSchema</code>",id:"inputschema",level:3},{value:"<code>@ObjectSchema</code>",id:"objectschema",level:3},{value:"<code>@UnionSchema</code>",id:"unionschema",level:3},{value:"<code>@InterfaceSchema</code>",id:"interfaceschema",level:3},{value:"<code>@IgnoreSchema</code>",id:"ignoreschema",level:3},{value:"Creating a schema manually",id:"creating-a-schema-manually",level:2},{value:"Tool Annotations",id:"tool-annotations",level:2},{value:"<code>@GQLDefault</code>",id:"gqldefault",level:3},{value:"<code>@GQLDeprecated</code>",id:"gqldeprecated",level:3},{value:"<code>@GQLDescription</code>",id:"gqldescription",level:3},{value:"<code>@GQLExcluded</code>",id:"gqlexcluded",level:3},{value:"<code>@GQLInputName</code>",id:"gqlinputname",level:3},{value:"<code>@GQLName</code>",id:"gqlname",level:3}],m={toc:c},s="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Java, there is no metaprogramming, we use APT (Java Annotation Processing) to generate codes."),(0,r.kt)("h2",{id:"core-annotations"},"Core annotations"),(0,r.kt)("h3",{id:"enumschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"@EnumSchema")),(0,r.kt)("p",null,"Defining GraphQL ",(0,r.kt)("strong",{parentName:"p"},"Enum Type"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@EnumSchema\nenum OriginEnum {\n    EARTH, MARS, BELT\n}\n")),(0,r.kt)("p",null,"The enumeration used in ",(0,r.kt)("strong",{parentName:"p"},"Input Object Type")," must be annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@ArgExtractor"),"."),(0,r.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"enum Origin {\n  EARTH\n  MARS\n  BELT\n}\n")),(0,r.kt)("h3",{id:"inputschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"@InputSchema")),(0,r.kt)("p",null,"Defining GraphQL ",(0,r.kt)("strong",{parentName:"p"},"Input Object Type"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@InputSchema\n@ArgExtractor\nrecord FilterArgs(Optional<Origin> origin, Optional<NestedArg> nestedArg) {\n}\n")),(0,r.kt)("p",null,"Any custom type (including enumeration) used for ",(0,r.kt)("strong",{parentName:"p"},"Input Object Type")," needs to be annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"ArgExtractor"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FilterArgs")," will be tiled, so the input parameters are ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nestedArg"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional<Origin>")," is the default supported type, no need for anything extra. For more types, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/SymphonyQL/docs/schema"},"Schema Specification"),"."),(0,r.kt)("p",null,"As mentioned above, ",(0,r.kt)("inlineCode",{parentName:"p"},"NestedArg")," is a custom type used in ",(0,r.kt)("strong",{parentName:"p"},"Input Object Type"),"."),(0,r.kt)("p",null,"In order to generate the correct ",(0,r.kt)("strong",{parentName:"p"},"Schema"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NestedArg")," must be defined with ",(0,r.kt)("inlineCode",{parentName:"p"},"@InputSchema")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@ArgExtractor"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@InputSchema\n@ArgExtractor\nrecord NestedArg(String id, Optional<String> name) {\n}\n")),(0,r.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"input NestedArgInput {\n    id: String!\n    name: String\n}\n")),(0,r.kt)("h3",{id:"objectschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"@ObjectSchema")),(0,r.kt)("p",null,"Defining simple GraphQL ",(0,r.kt)("strong",{parentName:"p"},"Object Type"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@ObjectSchema\nrecord CharacterOutput(String name, Origin origin) {\n}\n")),(0,r.kt)("p",null,"The object can be any record class, nested types also require annotation."),(0,r.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type CharacterOutput {\n  name: String!\n  origin: Origin!\n}\n")),(0,r.kt)("p",null,"Defining complex GraphQL ",(0,r.kt)("strong",{parentName:"p"},"Object Type")," for ",(0,r.kt)("strong",{parentName:"p"},"resolver"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@ObjectSchema\nrecord Queries(Function<FilterArgs, Source<CharacterOutput, NotUsed>> characters) {\n}\n")),(0,r.kt)("p",null,"Each ",(0,r.kt)("strong",{parentName:"p"},"resolver")," can contain multiple fields, each of which is a Query/Mutation/Subscription API.\nFor more types, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/SymphonyQL/docs/schema"},"Schema Specification"),"."),(0,r.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"# There is no FilterArgs, but it has all its fields: origin, nestedArg\ntype Queries {\n    characters(origin: Origin, nestedArg: NestedArgInput): [CharacterOutput!]\n}\n")),(0,r.kt)("h3",{id:"unionschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"@UnionSchema")),(0,r.kt)("p",null,"Defining simple GraphQL ",(0,r.kt)("strong",{parentName:"p"},"Union Type"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@UnionSchema\npublic sealed interface SearchResult permits Book, Author {\n}\n\n@ObjectSchema\nrecord Book(String title) implements SearchResult {\n}\n\n@ObjectSchema\nrecord Author(String name) implements SearchResult {\n}\n")),(0,r.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"union SearchResult = Book | Author\n\ntype Author {\n    name: String\n}\n\ntype Book {\n    title: String\n}\n")),(0,r.kt)("h3",{id:"interfaceschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"@InterfaceSchema")),(0,r.kt)("p",null,"Defining simple GraphQL ",(0,r.kt)("strong",{parentName:"p"},"Interface Type"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@InterfaceSchema\npublic sealed interface NestedInterface {\n}\n\n\n@InterfaceSchema\nsealed interface Mid1 extends NestedInterface {\n}\n\n@InterfaceSchema\nsealed interface Mid2 extends NestedInterface {\n}\n\n@ObjectSchema\nrecord FooA(String a, String b, String c) implements Mid1 {\n}\n\n@ObjectSchema\nrecord FooB(String b, String c, String d) implements Mid1, Mid2 {\n}\n\n@ObjectSchema\nrecord FooC(String b, String d, String e) implements Mid2 {\n}\n")),(0,r.kt)("p",null,"The snippet above will produce the following GraphQL type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"interface Mid1 implements NestedInterface {\n    b: String\n    c: String\n}\n\ninterface Mid2 implements NestedInterface {\n    b: String\n    d: String\n}\n\ninterface NestedInterface {\n    b: String\n}\n\ntype FooA implements Mid1 {\n    a: String\n    b: String\n    c: String\n}\n\ntype FooB implements Mid1 & Mid2 {\n    b: String\n    c: String\n    d: String\n}\n\ntype FooC implements Mid2 {\n    b: String\n    d: String\n    e: String\n}\n")),(0,r.kt)("h3",{id:"ignoreschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"@IgnoreSchema")),(0,r.kt)("p",null,"Annotation to ignore class from SymphonyQL's processing."),(0,r.kt)("h2",{id:"creating-a-schema-manually"},"Creating a schema manually"),(0,r.kt)("p",null,"If we want to define it manually, we can use the builder class in ",(0,r.kt)("inlineCode",{parentName:"p"},"symphony.schema.builder.*")," and add the ",(0,r.kt)("inlineCode",{parentName:"p"},"@IgnoreSchema")," annotation on record class."),(0,r.kt)("p",null,"Then, we should create a class ",(0,r.kt)("strong",{parentName:"p"},"under the same package"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If record class ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," is ",(0,r.kt)("strong",{parentName:"li"},"Object")," (or ",(0,r.kt)("em",{parentName:"li"},"Enum"),", ",(0,r.kt)("em",{parentName:"li"},"Union"),", ",(0,r.kt)("em",{parentName:"li"},"Interface"),"), a class named ",(0,r.kt)("inlineCode",{parentName:"li"},"ASchema")," should be created with the field ",(0,r.kt)("inlineCode",{parentName:"li"},"public static final Schema<A> schema = ???;"),"."),(0,r.kt)("li",{parentName:"ul"},"If record class ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," is ",(0,r.kt)("strong",{parentName:"li"},"Input Object (or ",(0,r.kt)("em",{parentName:"strong"},"Enum"),")"),", a class named ",(0,r.kt)("inlineCode",{parentName:"li"},"AInputSchema")," should be created with the field ",(0,r.kt)("inlineCode",{parentName:"li"},"public static final Schema<A> schema = ???;"),"."),(0,r.kt)("li",{parentName:"ul"},"It is also possible to customize the ",(0,r.kt)("inlineCode",{parentName:"li"},"ArgumentExtractor<A>"),", simply created a class named ",(0,r.kt)("inlineCode",{parentName:"li"},"AExtractor")," with the field ",(0,r.kt)("inlineCode",{parentName:"li"},"public static final ArgumentExtractor<A> extractor = ???;"),".")),(0,r.kt)("p",null,"We can use the builder class in ",(0,r.kt)("inlineCode",{parentName:"p"},"symphony.schema.builder.*")," to create ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema<A>"),"."),(0,r.kt)("p",null,"If these are not provided, an error will be reported by javac on which type has ",(0,r.kt)("inlineCode",{parentName:"p"},"@IgnoreSchema"),", such as ",(0,r.kt)("inlineCode",{parentName:"p"},"A or schema can't be found."),"."),(0,r.kt)("h2",{id:"tool-annotations"},"Tool Annotations"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Fields refer to components of the record class."),(0,r.kt)("li",{parentName:"ol"},"Type refers to the record class")),(0,r.kt)("h3",{id:"gqldefault"},(0,r.kt)("inlineCode",{parentName:"h3"},"@GQLDefault")),(0,r.kt)("p",null,"Annotation to specify the default value of an input field."),(0,r.kt)("h3",{id:"gqldeprecated"},(0,r.kt)("inlineCode",{parentName:"h3"},"@GQLDeprecated")),(0,r.kt)("p",null,"Annotation used to indicate a type or a field is deprecated."),(0,r.kt)("h3",{id:"gqldescription"},(0,r.kt)("inlineCode",{parentName:"h3"},"@GQLDescription")),(0,r.kt)("p",null,"Annotation used to provide a description to a field or a type."),(0,r.kt)("h3",{id:"gqlexcluded"},(0,r.kt)("inlineCode",{parentName:"h3"},"@GQLExcluded")),(0,r.kt)("p",null,"Annotation used to exclude a field from a type."),(0,r.kt)("h3",{id:"gqlinputname"},(0,r.kt)("inlineCode",{parentName:"h3"},"@GQLInputName")),(0,r.kt)("p",null,"Annotation used to customize the name of an input type."),(0,r.kt)("h3",{id:"gqlname"},(0,r.kt)("inlineCode",{parentName:"h3"},"@GQLName")),(0,r.kt)("p",null,"Annotation used to provide an alternative name to a field or a type."))}d.isMDXComponent=!0}}]);