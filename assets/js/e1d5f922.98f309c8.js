"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[771],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,y=u["".concat(l,".").concat(g)]||u[g]||m[g]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"Quick Start - Scala",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/quickstart-scala.md"},o=void 0,s={unversionedId:"quickstart-scala",id:"quickstart-scala",title:"Quick Start - Scala",description:"This guide gets you started with SymphonyQL with a simple working example on Scala.",source:"@site/../mdoc/target/mdoc/quickstart-scala.md",sourceDirName:".",slug:"/quickstart-scala",permalink:"/SymphonyQL/docs/quickstart-scala",draft:!1,editUrl:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/quickstart-scala.md",tags:[],version:"current",frontMatter:{title:"Quick Start - Scala",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/quickstart-scala.md"},sidebar:"someSidebar",previous:{title:"Quick Start - Java",permalink:"/SymphonyQL/docs/quickstart-java"},next:{title:"Installing",permalink:"/SymphonyQL/docs/installation"}},l={},c=[{value:"Fast integration into pekko-http applications",id:"fast-integration-into-pekko-http-applications",level:2},{value:"Altair support",id:"altair-support",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide gets you started with SymphonyQL with a simple working example on Scala."),(0,a.kt)("p",null,"Assuming we want to develop an application for the GraphQL Schema below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"schema {\n  query: Queries\n}\n\nenum Origin {\n  EARTH\n  MARS\n  BELT\n}\n\ntype Character {\n  name: String!\n  origin: Origin!\n}\n\ntype Queries {\n  characters(origin: Origin): [Character!]\n}\n")),(0,a.kt)("p",null,"Similarly, in Scala, you only need to use ",(0,a.kt)("strong",{parentName:"p"},"case class")," to define the schema and no longer need annotations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"enum Origin {\n  case EARTH, MARS, BELT\n}\n\ncase class Character(name: String, origin: Origin)\ncase class FilterArgs(origin: Option[Origin])\ncase class NestedArg(id: String, name: Optional[String])\ncase class Queries(characters: FilterArgs => Source[Character, NotUsed])\n")),(0,a.kt)("p",null,"SymphonyQL automatically generates schemas during compilation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val graphql: SymphonyQL = SymphonyQL\n    .newSymphonyQL()\n    .query(\n      Queries(args =>\n        Source.single(\n          Character("hello-" + args.origin.map(_.toString).getOrElse(""), args.origin.getOrElse(Origin.BELT))\n        )\n      )\n    )\n    .build()\n\nval characters =\n"""{\n  |  characters(origin: "MARS") {\n  |    name\n  |    origin\n  |  }\n  |}""".stripMargin\n  \nimplicit val actorSystem: ActorSystem                   = ActorSystem("symphonyActorSystem")\nval getRes: Future[SymphonyQLResponse[SymphonyQLError]] = graphql.runWith(SymphonyQLRequest(characters))\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Schema.derived[Queries]")," is an inline call by metaprogramming."),(0,a.kt)("h2",{id:"fast-integration-into-pekko-http-applications"},"Fast integration into pekko-http applications"),(0,a.kt)("p",null,"Inherit ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultRoute")," to get a default ",(0,a.kt)("inlineCode",{parentName:"p"},"routes"),", which is a POST ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/graphql"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'object SimpleHttpServer\n    extends DefaultRoute(graphql) {\n\n  override implicit val actorSystem: ClassicActorSystem =\n    ActorSystem[Nothing](serverBehavior, "SimpleHttpServer").classicSystem\n\n  def serverBehavior: Behavior[Nothing] = Behaviors.setup[Nothing] { context =>\n    implicit val system                                     = context.system\n    implicit val executionContext: ExecutionContextExecutor = context.executionContext\n\n    val bindingFuture = Http().newServerAt("localhost", 8080).bind(routes)\n    context.log.info("Server online at http://localhost:8080/")\n\n    Behaviors.receiveMessage { _ =>\n      bindingFuture\n        .flatMap(_.unbind())\n        .onComplete(_ => system.terminate())\n      Behaviors.stopped\n    }\n  }\n\n  def main(args: Array[String]): Unit =\n    serverBehavior\n}\n')),(0,a.kt)("h2",{id:"altair-support"},"Altair support"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7571).Z,width:"3468",height:"992"})))}m.isMDXComponent=!0},7571:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/altair-1ddb4d92620a6c51cfad487526628247.jpg"}}]);