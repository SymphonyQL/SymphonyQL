"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[771],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),y=a,g=u["".concat(s,".").concat(y)]||u[y]||m[y]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={title:"Quick Start (Scala)",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/quickstart-scala.md"},o=void 0,c={unversionedId:"quickstart-scala",id:"quickstart-scala",title:"Quick Start (Scala)",description:"This guide gets you started with SymphonyQL with a simple working example on Scala.",source:"@site/../mdoc/target/mdoc/quickstart-scala.md",sourceDirName:".",slug:"/quickstart-scala",permalink:"/SymphonyQL/docs/quickstart-scala",draft:!1,editUrl:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/quickstart-scala.md",tags:[],version:"current",frontMatter:{title:"Quick Start (Scala)",custom_edit_url:"https://github.com/SymphonyQL/SymphonyQL/edit/master/docs/quickstart-scala.md"},sidebar:"someSidebar",previous:{title:"Quick Start (Java)",permalink:"/SymphonyQL/docs/quickstart-java"},next:{title:"Installing",permalink:"/SymphonyQL/docs/installation"}},s={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide gets you started with SymphonyQL with a simple working example on Scala."),(0,a.kt)("p",null,"Assuming we want to develop an application for the GraphQL Schema below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"schema {\n  query: Queries\n}\n\nenum Origin {\n  EARTH\n  MARS\n  BELT\n}\n\ninput NestedArgInput {\n  id: String!\n  name: String\n}\n\ntype CharacterOutput {\n  name: String!\n  origin: Origin!\n}\n\ntype Queries {\n  characters(origin: Origin, nestedArg: NestedArgInput): [CharacterOutput!]\n}\n")),(0,a.kt)("p",null,"Similarly, in Scala, you only need to use ",(0,a.kt)("strong",{parentName:"p"},"case class")," to define the schema."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"enum Origin {\n  case EARTH, MARS, BELT\n}\n\ncase class Character(name: String, origin: Origin)\ncase class FilterArgs(origin: Option[Origin])\ncase class NestedArg(id: String, name: Optional[String])\ncase class Queries(characters: FilterArgs => Source[Character, NotUsed])\n")),(0,a.kt)("p",null,"SymphonyQL automatically generates schema during compilation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'def main(args: Array[String]): Unit = {\n    val graphql: SymphonyQL = SymphonyQL\n    .newSymphonyQL()\n    .addQuery(\n      Queries(args =>\n        Source.single(\n          Character("hello-" + args.origin.map(_.toString).getOrElse(""), args.origin.getOrElse(Origin.BELT))\n        )\n      ),\n      Schema.derived[Queries]\n    )\n    .build()\n    \n    val characters =\n    """{\n      |  characters(origin: "MARS") {\n      |    name\n      |    origin\n      |  }\n      |}""".stripMargin\n      \n    implicit val actorSystem: ActorSystem                   = ActorSystem("symphonyActorSystem")\n    val getRes: Future[SymphonyQLResponse[SymphonyQLError]] = graphql.runWith(SymphonyQLRequest(Some(characters)))\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Schema.derived[Queries]")," is an inline call by metaprogramming."))}m.isMDXComponent=!0}}]);